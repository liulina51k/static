git reset --hard commit_id
git reset --hard HEAD^ 回到上一版本 HEAD~100 前100个版本
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

工作区：就是你在电脑里能看到的目录
版本库:工作区有一个隐藏目录.git 这个不算工作区，而是Git的版本库。
暂存区：英文叫stage,或index。一般存放在git 目录下的index文件(.git/index)中，所以我们把暂存区时也叫作索引(index).

如何撤销修改
1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步：
第一步用命令git reset HEAD file，就回到了1；
第二步按1操作。
3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

ssh-keygen -t rsa -C "youremail@example.com"
注意：要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；关联后，使用命令git push -u origin master第一次推送master分支的所有内容；此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

[分支]
git log --graph --pretty=oneline --abbrev-commit可以查看到分支的合并情况
用git log --graph命令可以看到分支合并图

git stash apply & git stash drop  ===》git stash pop
git remote  git remote -v(比之前详细)

创建本地分支和远程分支的链接关系
git branch --set-upstream branch-name origin/branch-name

创建远程origin的dev分支到本地
git checkout -b dev origin/dev

master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发

多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
[标签]
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。

git push origin <tagname>可以推送一个本地标签；
git push origin --tags可以推送全部未推送过的本地标签；
git tag -d <tagname>可以删除一个本地标签；
git push origin :refs/tags/<tagname>可以删除一个远程标签。

[自定义git]
让Git显示颜色
git config --global color.ui true

.gitignore文件
忽略文件的原则是：
忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

配置文件
每个仓库的Git配置文件都放在.git/config文件中
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中

搭建git服务器
安装git sudo apt-get install git
创建一个git用户，用来运行git服务 sudo adduser git
创建证书登录 收集所有需要登录的用户的公钥，/home/git/.ssh/authorized_keys文件里，一行一个
初始化Git仓库 
sudo git init --bare sample.git
sudo chown -R git:git sample.git
禁用shell登录
编辑/etc/passwd
git:x:1001:1001:,,,:/home/git:/bin/bash 修改为
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
克隆远程仓库
git clone git@server:/srv/sample.git

管理公钥和管理权限
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite。
git不支持权限控制，但是Git支持钩子（hook），所以可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。